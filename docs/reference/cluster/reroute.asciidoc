[[cluster-reroute]]
== 集群重路由

重路由命令允许显式执行包含特定命令的集群重新路由分配命令。举例来说，一个分片可以从一个节点显式的移动到另一个节点，一次分配可以被取消，或者一个未分配的分片可以被显式的指定分配到特定节点。

下面是一个简单的调用重路由 API 的小例子：
[source,js]
--------------------------------------------------
POST /_cluster/reroute
{
    "commands" : [
        {
            "move" : {
                "index" : "test", "shard" : 0,
                "from_node" : "node1", "to_node" : "node2"
            }
        },
        {
          "allocate_replica" : {
                "index" : "test", "shard" : 1,
                "node" : "node3"
          }
        }
    ]
}
--------------------------------------------------
// CONSOLE
// TEST[skip:doc tests run with only a single node]

要记住的一个重要方面是当一次分配发生时，集群将会致力于将集群状态重新调整到均衡状态。举例来说，如果一次分配包含了将一个分片从 `node1` 转移到 `node2` ，为了达到 `even` 状态，另一个分片将会从 `node2` 移动到 `node1` 使整个系统达到平衡。

集群可以设置为禁用分配，这表示只有显式的分配将会有效。显然，仅当所有命令被接受，集群才会重新寻求平衡状态。

另一个选项是在 `dry_run` （作为 URI 的 flag 或在请求体中）状态下运行命令。这将导致命令应用在当前集群状态，且返回命令（和集群重平衡）应用后的结果集群状态。

如果声明了 `explain` 参数，那么一个有关为什么命令被执行或未被执行的详细解释将会返回。

命令支持:

`move`::
    将一个已经启动的分片从一个节点移动到另一个节点。接受 `index` 参数和 `shard` 参数，分别代表索引名称和分片序号， `from_node` 参数代表从哪个节点移动分片， `to_node` 代表分片移动到哪个节点去。

`cancel`::
    取消一个分片的分配（或者恢复）。接受 `index` 参数和 `shard` 参数分别代表索引名称和分片序号，还有 `node` 参数代表取消分片在哪个节点上的分配。该参数同时接受 `allow_primary` 标记来显式指定允许取消主要分片的分配。这可以用来强行对主分片的已有副本进行重新同步，通过取消他们的分配然后允许他们通过标准的重新分配程序重新初始化。

`allocate_replica`::
    将一个未分配的副本分片分配到一个节点。接受 `index` 参数和 `shard` 参数分别代表索引名称和分片序号，还有 `node` 参数代表哪个节点分配分片。参考 <<modules-cluster,allocation deciders>> 。

还有两个命令是可用的，他们允许将主分片分配到节点。这些命令在使用时需要额外的小心，因为主分片分配总是被 Elasticsearch 全自动管理的。下面是一些主分片不能被自动分配的原因：

- 一个新的索引被创建了，但是没有一个节点满足分配要求。
- 在集群中的当前数据节点上不能找到数据的最新拷贝分片。为了预防数据丢失，系统不会自动将一个陈旧的分片拷贝提升到主分片级别。

两个手动重载的方法可以用来强行分配主分片：

`allocate_stale_primary`::
    向一个拥有陈旧拷贝的节点分配主分片。接受 `index` 参数和 `shard` 参数分别代表索引名称和分片序号，还有 `node` 参数代表在哪个节点上分配分片。使用该命令也许会导致给定 id 的分片的数据丢失。如果一个拥有该数据可用拷贝的节点在稍后加入到集群，那么那些数据将会被通过该命令强制分配的陈旧拷贝所重写。为了保证用户完全理解了这个问题，这个命令需要一个特别的参数 `accept_data_loss` 并显式声明为 `true` 来使命令正常工作。

`allocate_empty_primary`::
    向一个节点分配一个空的主分片。接受 `index` 参数和 `shard` 参数分别代表索引名称和分片序号，还有 `node` 参数代表在哪个节点上分配分片。使用这个命令将导致索引在该分片（如果该分片先前已经启动）上的所有数据丢失。如果一个拥有该数据可用拷贝的节点在稍后加入到集群，那些数据的可用拷贝将会被删除！为了保证用户完全理解了这个问题，这个命令需要一个特别的参数 `accept_data_loss` 并显式声明为 `true` 来使命令正常工作。

[float]
=== 重试失败的分片

集群将会在放弃分配一个分片并将其标记为未分片之前连续尝试最大 `index.allocation.max_retries` 次分配一个分片（默认为 `5` ）。这种情况可能是由于结构性问题引起的，例如一个分析器引用了一个在所有节点上都不存在的停用词文件。

一旦这个问题发生了，可以通过 <<cluster-reroute,`reroute`>> API 的 `?retry_failed` 参数重新手动启动分配过程。该方法会对这些分片进行一次重新尝试分配。
